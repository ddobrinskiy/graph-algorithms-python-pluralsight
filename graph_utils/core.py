# AUTOGENERATED! DO NOT EDIT! File to edit: 00_core.ipynb (unless otherwise specified).

__all__ = ['Graph', 'AdjacencyMatrixGraph', 'Node', 'AdjacencySetGraph', 'asg']

# Cell
import abc
import numpy as np

class Graph(abc.ABC):

    def __init__(self, numVertices:int, directed:bool=False):
        self.numVertices = numVertices
        self.directed = directed

    def check_validity(self, v):
        if v < 0 or v >= self.numVertices:
            raise ValueError("Vertice {} is out of bounds".format(v))
        return True

    @abc.abstractmethod
    def add_edge(self, v1, v2, weight):
        pass

    @abc.abstractmethod
    def get_adjacent_vertices(self, v):
        pass

    @abc.abstractmethod
    def get_indegree(self, v):
        pass

    @abc.abstractmethod
    def get_edge_weight(self, v1, v2):
        pass

    @abc.abstractmethod
    def display(self):
        pass


# Cell

class AdjacencyMatrixGraph(Graph):
    def __init__(self, numVertices:int, directed:bool=False):
        super(AdjacencyMatrixGraph, self).__init__(numVertices, directed)

        self.matrix = np.zeros([numVertices, numVertices])


    def add_edge(self, v1, v2, weight=1):

        self.check_validity(v1)
        self.check_validity(v2)
        if weight < 1:
            raise ValueError("An edge cant have weight < 1")

        self.matrix[v1][v2] = weight

    def get_adjacent_vertices(self, v):
        self.check_validity(v)

        adjacent_vertices = []

        for i in range(self.numVertices):
            if self.matrix[v][i] > 0:
                adjacent_vertices.append(i)
        return adjacent_vertices

    def get_edge_weight(self, v1, v2):
        self.check_validity(v1)
        self.check_validity(v2)
        return self.matrix[v1][v2]

    def get_indegree(self, v):
        self.check_validity(v)

        indegree = 0
        for i in range(self.numVertices):
            if self.matrix[v][i] > 0:
                indegree += 1
        return indegree

    def display(self):
        print(str(self.matrix))

# Cell
class Node:
    """Node represents one vertex in a graph

    each node has a vertex id
    each node is associated with a set of adjacent vertices
    """
    def __init__(self, vertexId):
        self.vertexId = vertexId
        self.adjacency_set = set()

    def add_edge(self, v):
        if self.vertexId == v:
            raise ValueError("Vertex {} cannot be adjacent to itself".format(v))
        else:
            self.adjacency_set.add(v)

    def get_adjacent_vertices(self):
        return sorted(self.adjacency_set)

    def __repr__(self):
        return "Node({})".format(self.vertexId)

# Cell
class AdjacencySetGraph(Graph):

    def __init__(self, numVertices, directed=False):
        super(AdjacencySetGraph, self).__init__(numVertices, directed)
        self.vertex_list = [Node(i) for i in range(numVertices)]

    def add_edge(self, v1, v2, weight=1):
        self.check_validity(v1)
        self.check_validity(v2)
        if weight != 1:
            raise ValueError("An adjacency set can only represent edge weights == 1")

        # add connection from v1 to v2
        self.vertex_list[v1].add_edge(v2)

        # undirected graphs work both ways
        if self.directed == False:
            self.vertex_list[v2].add_edge(v1)

    def get_adjacent_vertices(self, v):
        self.check_validity(v)

        node = self.vertex_list[v]
        return node.get_adjacent_vertices()

    def get_indegree(self, v):
        self.check_validity(v)

        indegree = 0

        for i in range(self.numVertices):
            if v in self.get_adjacent_vertices(i):
                indegree += 1

        return indegree

    def get_edge_weight(self, v1, v2):
        return 1


    def display(self):
        for node in asg.vertex_list:
            for v in node.get_adjacent_vertices():
                print(node.vertexId, "-->", v)


asg = AdjacencySetGraph(4, directed=True)
asg.vertex_list