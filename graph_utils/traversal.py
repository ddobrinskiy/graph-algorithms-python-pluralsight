# AUTOGENERATED! DO NOT EDIT! File to edit: 01_traversal.ipynb (unless otherwise specified).

__all__ = ['breadth_first', 'depth_first']

# Cell

from queue import Queue
from typing import List

import numpy as np

import graph_utils.core as gu
gu.__all__

# Cell
def breadth_first(graph:gu.Graph, start:int=0) -> List:
    """perform a BFS

    # Breadth-first graph traversal

    > scan all nodes 1 step away from origin, then 2 steps, then 3, and so on
    >
    > i.e. "move in concentric circles from origin"
    """


    queue = Queue() # FiFo data struct
    queue.put(start)

    visited = np.zeros(graph.numVertices)

    while not queue.empty():
        vertex = queue.get()

        # if a node has already been visited, skip it
        if visited[vertex] == 1:
            continue

        # otherwise, initiate node visit:

        # indicate that a node has been visited
#         print("Visit: ", vertex)
        visited[vertex] = 1

        # add all UN-VISITED neigbors of a node to queue
        for v in graph.get_adjacent_vertices(vertex):
            if not visited[v]:
                queue.put(v)

    if not visited.all():
        nodes_not_visited = (visited == 0).sum()
        nodes_num = len(visited)
        msg = "{} out of {} nodes were not visited!".format(nodes_not_visited, nodes_num)
        raise ValueError(msg)

    return visited.all()

# Cell
def depth_first(graph:gu.Graph, visited, current=0) -> List:
    """perform a DFS

    # Depth-first graph traversal
    > go deep in 1 direction until you reach a dead end
    """

    # if a node has already been visited, end recursion
    if visited[current]:
        return

    # mark  node was visited
    visited[current] = 1

    # iterate over all connected vertices

    print("Visit: ", current)

    for vertex in graph.get_adjacent_vertices(current):
        depth_first(graph, visited, current=vertex)

